// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ArifulProtik/gograph-notes/ent/notes"
	"github.com/ArifulProtik/gograph-notes/ent/user"
	"github.com/google/uuid"
)

// NotesCreate is the builder for creating a Notes entity.
type NotesCreate struct {
	config
	mutation *NotesMutation
	hooks    []Hook
}

// SetTitle sets the "title" field.
func (nc *NotesCreate) SetTitle(s string) *NotesCreate {
	nc.mutation.SetTitle(s)
	return nc
}

// SetBody sets the "body" field.
func (nc *NotesCreate) SetBody(s string) *NotesCreate {
	nc.mutation.SetBody(s)
	return nc
}

// SetSlug sets the "slug" field.
func (nc *NotesCreate) SetSlug(s string) *NotesCreate {
	nc.mutation.SetSlug(s)
	return nc
}

// SetTags sets the "tags" field.
func (nc *NotesCreate) SetTags(s []string) *NotesCreate {
	nc.mutation.SetTags(s)
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NotesCreate) SetCreatedAt(t time.Time) *NotesCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NotesCreate) SetNillableCreatedAt(t *time.Time) *NotesCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NotesCreate) SetID(u uuid.UUID) *NotesCreate {
	nc.mutation.SetID(u)
	return nc
}

// SetAuthorID sets the "author" edge to the User entity by ID.
func (nc *NotesCreate) SetAuthorID(id uuid.UUID) *NotesCreate {
	nc.mutation.SetAuthorID(id)
	return nc
}

// SetNillableAuthorID sets the "author" edge to the User entity by ID if the given value is not nil.
func (nc *NotesCreate) SetNillableAuthorID(id *uuid.UUID) *NotesCreate {
	if id != nil {
		nc = nc.SetAuthorID(*id)
	}
	return nc
}

// SetAuthor sets the "author" edge to the User entity.
func (nc *NotesCreate) SetAuthor(u *User) *NotesCreate {
	return nc.SetAuthorID(u.ID)
}

// Mutation returns the NotesMutation object of the builder.
func (nc *NotesCreate) Mutation() *NotesMutation {
	return nc.mutation
}

// Save creates the Notes in the database.
func (nc *NotesCreate) Save(ctx context.Context) (*Notes, error) {
	var (
		err  error
		node *Notes
	)
	nc.defaults()
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NotesMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			if node, err = nc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			if nc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NotesCreate) SaveX(ctx context.Context) *Notes {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NotesCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NotesCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NotesCreate) defaults() {
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := notes.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
	if _, ok := nc.mutation.ID(); !ok {
		v := notes.DefaultID()
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NotesCreate) check() error {
	if _, ok := nc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "title"`)}
	}
	if v, ok := nc.mutation.Title(); ok {
		if err := notes.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "title": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Body(); !ok {
		return &ValidationError{Name: "body", err: errors.New(`ent: missing required field "body"`)}
	}
	if v, ok := nc.mutation.Body(); ok {
		if err := notes.BodyValidator(v); err != nil {
			return &ValidationError{Name: "body", err: fmt.Errorf(`ent: validator failed for field "body": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "slug"`)}
	}
	if v, ok := nc.mutation.Slug(); ok {
		if err := notes.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "slug": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "tags"`)}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "created_at"`)}
	}
	return nil
}

func (nc *NotesCreate) sqlSave(ctx context.Context) (*Notes, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		_node.ID = _spec.ID.Value.(uuid.UUID)
	}
	return _node, nil
}

func (nc *NotesCreate) createSpec() (*Notes, *sqlgraph.CreateSpec) {
	var (
		_node = &Notes{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: notes.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: notes.FieldID,
			},
		}
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notes.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := nc.mutation.Body(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notes.FieldBody,
		})
		_node.Body = value
	}
	if value, ok := nc.mutation.Slug(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: notes.FieldSlug,
		})
		_node.Slug = value
	}
	if value, ok := nc.mutation.Tags(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeJSON,
			Value:  value,
			Column: notes.FieldTags,
		})
		_node.Tags = value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: notes.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := nc.mutation.AuthorIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   notes.AuthorTable,
			Columns: []string{notes.AuthorColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.user_notes = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NotesCreateBulk is the builder for creating many Notes entities in bulk.
type NotesCreateBulk struct {
	config
	builders []*NotesCreate
}

// Save creates the Notes entities in the database.
func (ncb *NotesCreateBulk) Save(ctx context.Context) ([]*Notes, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Notes, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NotesMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NotesCreateBulk) SaveX(ctx context.Context) []*Notes {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NotesCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NotesCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
